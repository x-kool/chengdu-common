package com.xkool.common;

import java.util.ArrayList;
import java.util.List;
import java.util.Optional;
import java.util.stream.Collectors;

import static com.xkool.common.constant.PlanningLandUsageIdConstant.*;
import static com.xkool.common.constant.PlanningLandUsageNameConstant.*;

public class PlanningLandUsageDO {

    public static List<PlanningLandUsage> planningLandUsages = new ArrayList<PlanningLandUsage>() {
        {
            add(new PlanningLandUsage(RESIDENTIAL_PLANNING_LAND_USAGE_ID, 0, RESIDENTIAL_PLANNING_LAND_USAGE_NAME));
            add(new PlanningLandUsage(TYPE_ONE_RESIDENTIAL_PLANNING_LAND_USAGE_ID, RESIDENTIAL_PLANNING_LAND_USAGE_ID, TYPE_ONE_RESIDENTIAL_PLANNING_LAND_USAGE_NAME));
            add(new PlanningLandUsage(TYPE_ONE_RESIDENTIAL_AND_FACILITY_PLANNING_LAND_USAGE_ID, TYPE_ONE_RESIDENTIAL_PLANNING_LAND_USAGE_ID, TYPE_ONE_RESIDENTIAL_AND_FACILITY_PLANNING_LAND_USAGE_NAME));
            add(new PlanningLandUsage(TYPE_ONE_SERVICE_FACILITY_PLANNING_LAND_USAGE_ID, TYPE_ONE_RESIDENTIAL_PLANNING_LAND_USAGE_ID, TYPE_ONE_SERVICE_FACILITY_PLANNING_LAND_USAGE_NAME));
            add(new PlanningLandUsage(TYPE_TWO_RESIDENTIAL_PLANNING_LAND_USAGE_ID, RESIDENTIAL_PLANNING_LAND_USAGE_ID, TYPE_TWO_RESIDENTIAL_PLANNING_LAND_USAGE_NAME));
            add(new PlanningLandUsage(TYPE_TWO_RESIDENTIAL_AND_FACILITY_PLANNING_LAND_USAGE_ID, TYPE_TWO_RESIDENTIAL_PLANNING_LAND_USAGE_ID, TYPE_TWO_RESIDENTIAL_AND_FACILITY_PLANNING_LAND_USAGE_NAME));
            add(new PlanningLandUsage(TYPE_TWO_SERVICE_FACILITY_PLANNING_LAND_USAGE_ID, TYPE_TWO_RESIDENTIAL_PLANNING_LAND_USAGE_ID, TYPE_TWO_SERVICE_FACILITY_PLANNING_LAND_USAGE_NAME));
            add(new PlanningLandUsage(TYPE_THREE_RESIDENTIAL_PLANNING_LAND_USAGE_ID, RESIDENTIAL_PLANNING_LAND_USAGE_ID, TYPE_THREE_RESIDENTIAL_PLANNING_LAND_USAGE_NAME));
            add(new PlanningLandUsage(TYPE_THREE_RESIDENTIAL_AND_FACILITY_PLANNING_LAND_USAGE_ID, TYPE_THREE_RESIDENTIAL_PLANNING_LAND_USAGE_ID, TYPE_THREE_RESIDENTIAL_AND_FACILITY_PLANNING_LAND_USAGE_NAME));
            add(new PlanningLandUsage(TYPE_THREE_SERVICE_FACILITY_PLANNING_LAND_USAGE_ID, TYPE_THREE_RESIDENTIAL_PLANNING_LAND_USAGE_ID, TYPE_THREE_SERVICE_FACILITY_PLANNING_LAND_USAGE_NAME));
            add(new PlanningLandUsage(BUSINESS_AND_FACILITY_PLANNING_LAND_USAGE_ID, 0, BUSINESS_AND_FACILITY_PLANNING_LAND_USAGE_NAME));
            add(new PlanningLandUsage(BUSINESS_PLANNING_LAND_USAGE_ID, BUSINESS_AND_FACILITY_PLANNING_LAND_USAGE_ID, BUSINESS_PLANNING_LAND_USAGE_NAME));
            add(new PlanningLandUsage(RETAIL_BUSINESS_PLANNING_LAND_USAGE_ID, BUSINESS_PLANNING_LAND_USAGE_ID, RETAIL_BUSINESS_PLANNING_LAND_USAGE_NAME));
            add(new PlanningLandUsage(WHOLESALE_MARKET_PLANNING_LAND_USAGE_ID, BUSINESS_PLANNING_LAND_USAGE_ID, WHOLESALE_MARKET_PLANNING_LAND_USAGE_NAME));
            add(new PlanningLandUsage(CATERING_PLANNING_LAND_USAGE_ID, BUSINESS_PLANNING_LAND_USAGE_ID, CATERING_PLANNING_LAND_USAGE_NAME));
            add(new PlanningLandUsage(HOSTEL_PLANNING_LAND_USAGE_ID, BUSINESS_PLANNING_LAND_USAGE_ID, HOSTEL_PLANNING_LAND_USAGE_NAME));
            add(new PlanningLandUsage(BUSINESS_FACILITIES_PLANNING_LAND_USAGE_ID, BUSINESS_AND_FACILITY_PLANNING_LAND_USAGE_ID, BUSINESS_FACILITIES_PLANNING_LAND_USAGE_NAME));
            add(new PlanningLandUsage(FINANCIAL_INSURANCE_PLANNING_LAND_USAGE_ID, BUSINESS_FACILITIES_PLANNING_LAND_USAGE_ID, FINANCIAL_INSURANCE_PLANNING_LAND_USAGE_NAME));
            add(new PlanningLandUsage(ART_MEDIA_PLANNING_LAND_USAGE_ID, BUSINESS_FACILITIES_PLANNING_LAND_USAGE_ID, ART_MEDIA_PLANNING_LAND_USAGE_NAME));
            add(new PlanningLandUsage(OTHER_BUSINESS_FACILITY_PLANNING_LAND_USAGE_ID, BUSINESS_FACILITIES_PLANNING_LAND_USAGE_ID, OTHER_BUSINESS_FACILITY_PLANNING_LAND_USAGE_NAME));
            add(new PlanningLandUsage(ENTERTAINMENT_AND_WELLNESS_FACILITY_PLANNING_LAND_USAGE_ID, BUSINESS_AND_FACILITY_PLANNING_LAND_USAGE_ID, ENTERTAINMENT_AND_WELLNESS_FACILITY_PLANNING_LAND_USAGE_NAME));
            add(new PlanningLandUsage(ENTERTAINMENT_PLANNING_LAND_USAGE_ID, ENTERTAINMENT_AND_WELLNESS_FACILITY_PLANNING_LAND_USAGE_ID, ENTERTAINMENT_PLANNING_LAND_USAGE_NAME));
            add(new PlanningLandUsage(WELLNESS_PLANNING_LAND_USAGE_ID, ENTERTAINMENT_AND_WELLNESS_FACILITY_PLANNING_LAND_USAGE_ID, WELLNESS_PLANNING_LAND_USAGE_NAME));
            add(new PlanningLandUsage(INDUSTRY_PLANNING_LAND_USAGE_ID, 0, INDUSTRY_PLANNING_LAND_USAGE_NAME));
            add(new PlanningLandUsage(TYPE_ONE_INDUSTRY_PLANNING_LAND_USAGE_ID, INDUSTRY_PLANNING_LAND_USAGE_ID, TYPE_ONE_INDUSTRY_PLANNING_LAND_USAGE_NAME));
            add(new PlanningLandUsage(TYPE_TWO_INDUSTRY_PLANNING_LAND_USAGE_ID, INDUSTRY_PLANNING_LAND_USAGE_ID, TYPE_TWO_INDUSTRY_PLANNING_LAND_USAGE_NAME));
            add(new PlanningLandUsage(TYPE_THREE_INDUSTRY_LAND_USAGE_ID, INDUSTRY_PLANNING_LAND_USAGE_ID, TYPE_THREE_INDUSTRY_LAND_USAGE_NAME));
            add(new PlanningLandUsage(LOGISTICS_AND_WAREHOUSING_PLANNING_LAND_USAGE_ID, 0, LOGISTICS_AND_WAREHOUSING_PLANNING_LAND_USAGE_NAME));
            add(new PlanningLandUsage(TYPE_ONE_LOGISTICS_AND_WAREHOUSING_PLANNING_LAND_USAGE_ID, LOGISTICS_AND_WAREHOUSING_PLANNING_LAND_USAGE_ID, TYPE_ONE_LOGISTICS_AND_WAREHOUSING_PLANNING_LAND_USAGE_NAME));
            add(new PlanningLandUsage(TYPE_TWO_LOGISTICS_AND_WAREHOUSING_PLANNING_LAND_USAGE_ID, LOGISTICS_AND_WAREHOUSING_PLANNING_LAND_USAGE_ID, TYPE_TWO_LOGISTICS_AND_WAREHOUSING_PLANNING_LAND_USAGE_NAME));
            add(new PlanningLandUsage(TYPE_THREE_LOGISTICS_AND_WAREHOUSING_PLANNING_LAND_USAGE_ID, LOGISTICS_AND_WAREHOUSING_PLANNING_LAND_USAGE_ID, TYPE_THREE_LOGISTICS_AND_WAREHOUSING_PLANNING_LAND_USAGE_NAME));
        }
    };

    public static PlanningLandUsage getPlanningLandUsageByName(String name) {
        Optional<PlanningLandUsage> planningLandUsageOptional = planningLandUsages.stream()
                .filter(planningLandUsage -> planningLandUsage.getName().equals(name))
                .findFirst();
        return planningLandUsageOptional.orElse(null);
    }

    public static PlanningLandUsage getPlanningLandUsageById(int id) {
        Optional<PlanningLandUsage> planningLandUsageOptional = planningLandUsages.stream()
                .filter(planningLandUsage -> planningLandUsage.getId() == id)
                .findFirst();
        return planningLandUsageOptional.orElse(null);
    }

    public static List<PlanningLandUsage> getPlanningLandUsagesByParentId(Integer id) {
        return planningLandUsages.stream()
                .filter(planningLandUsage -> planningLandUsage.getParentId() == id).collect(Collectors.toList());
    }

    public static List<PlanningLandUsage> getPlanningLandUsagees() {
        return planningLandUsages;
    }

}
